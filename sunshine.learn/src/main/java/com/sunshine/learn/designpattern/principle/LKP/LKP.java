package com.sunshine.learn.designpattern.principle.LKP;

/**
 * 2015年7月21日16:52:07
 * 迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least Knowledge Principle，LKP）。
          一个对象应该对其他对象有最少的了解。通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，
          你（被耦合或调用的类）的内部是如何复杂都和我没关系，那是你的事情，我就知道你提供的public方法，我就调用这么多，其他的一概不关心。
迪米特法则（Law of Demeter，LoD）也称为最少知识原则（Least Knowledge Principle，LKP）。
就是说一个对象应当对其他对象有尽可能少的了解，类与类之间的了解的越多，关系越密切，耦合度越大，当一个类发生改变时，另一个类也可能发生变化。

迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：
  (1) 当前对象本身(this)；
  (2) 以参数形式传入到当前对象方法中的对象；
  (3) 当前对象的成员对象；
  (4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；
  (5) 当前对象所创建的对象。
  
迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，
那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。
简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。
      
在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，
一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；
在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。  

注意：一个类只和朋友交流，不与陌生类交流，不要出现getA().getB().getC().getD()这种情况
（在一种极端情况下允许出现这种访问，即每一个点号后面的返回类型都相同），类与类之间的关系是建立在类间的，
而不是方法间，因此一个方法尽量不引入一个类中不存在的对象，当然，JDK API提供的类除外。 朋友间也是有距离的
一个类公开的public属性或方法越多，修改时涉及的面也就越大，变更引起的风险扩散也就越大。
因此，为了保持朋友类间的距离，在设计时需要反复衡量：是否还可以再减少public方法和属性，
是否可以修改为private、package-private（包类型，在类、方法、变量前不加访问权限，则默认为包类型）、protected等访问权限，
是否可以加上final关键字等。
注意：迪米特法则要求类“羞涩”一点，尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，
多使用private、package-private、protected等访问权限。

是自己的就是自己的
如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，就放置在本类中。
谨慎使用Serializable

最后，迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。
 */
public class LKP {

	public static void main(String[] args) {
		Light light = new Light();
		light.turnOn();
		light.turnOff();
	}
}
